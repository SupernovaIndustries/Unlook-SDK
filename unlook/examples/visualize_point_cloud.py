#!/usr/bin/env python3
"""
Simple example demonstrating how to visualize point clouds generated by UnLook SDK.

This script loads and visualizes a point cloud file (PLY, PCD, etc.) using the
visualization utilities provided by UnLook SDK.

Usage:
    python visualize_point_cloud.py <point_cloud_file> [--debug]
"""

import os
import sys
import argparse
import logging
from pathlib import Path

# Configure logging
logging.basicConfig(level=logging.INFO,
                   format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Add parent directory to path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))

try:
    from unlook.client.visualization import ScanVisualizer, visualize_scan_result
except ImportError as e:
    logger.error(f"Error importing visualization module: {e}")
    print("Make sure you're running this script from the UnLook-SDK directory structure.")
    sys.exit(1)

# Check if Open3D is available
try:
    import open3d as o3d
    OPEN3D_AVAILABLE = True
except ImportError:
    logger.warning("open3d not installed. Install with 'pip install open3d' for full functionality.")
    OPEN3D_AVAILABLE = False


def main():
    """Main function."""
    parser = argparse.ArgumentParser(description="Visualize 3D scan results")
    parser.add_argument("file_path", help="Path to point cloud or mesh file")
    parser.add_argument("--debug", "-d", action="store_true", help="Enable debug mode with additional output")
    parser.add_argument("--output", "-o", help="Output directory for saving screenshots")
    parser.add_argument("--no-gui", action="store_true", help="Run without GUI (screenshots only)")
    args = parser.parse_args()
    
    # Set debug level
    if args.debug:
        logging.getLogger().setLevel(logging.DEBUG)
        logger.setLevel(logging.DEBUG)
    
    # Warning about Open3D
    if not OPEN3D_AVAILABLE:
        print("Warning: open3d is required for full visualization. Install with: pip install open3d")
        print("Will attempt to continue with limited functionality.")
    
    # Ensure path is absolute
    file_path = os.path.abspath(args.file_path)
    
    # Check if file exists
    if not os.path.exists(file_path):
        print(f"Error: File '{file_path}' not found")
        sys.exit(1)
    
    # Check file extension
    ext = os.path.splitext(file_path)[1].lower()
    if ext not in ['.ply', '.pcd', '.xyz', '.pts', '.obj', '.stl', '.off', '.gltf']:
        print(f"Warning: Unrecognized file extension '{ext}'. Supported formats: .ply, .pcd, .xyz, .pts, .obj, .stl, .off, .gltf")
    
    # Create output directory if specified
    if args.output:
        os.makedirs(args.output, exist_ok=True)
        print(f"Results will be saved to: {args.output}")
    
    try:
        # Initialize visualizer with error handling
        visualizer = ScanVisualizer(use_window=not args.no_gui)
        
        # Check if it's a point cloud or mesh based on extension
        is_mesh = ext in ['.obj', '.stl', '.off', '.gltf']
        
        if is_mesh:
            print("Loading mesh file...")
            try:
                mesh = visualizer.load_mesh(file_path)
                
                if len(mesh.triangles) == 0:
                    print("Warning: Mesh has no triangles. File may be invalid or empty.")
                else:
                    print(f"Mesh loaded successfully with {len(mesh.triangles)} triangles and {len(mesh.vertices)} vertices")
                    
                    # Create a screenshot path if output directory specified
                    screenshot_path = os.path.join(args.output, "mesh_visualization.png") if args.output else None
                    
                    # Visualize the mesh
                    print("Visualizing mesh...")
                    visualizer.visualize_mesh(mesh, screenshot_path=screenshot_path, show_wireframe=False)
                    
                    # Also save a wireframe view if output directory specified
                    if args.output:
                        wireframe_path = os.path.join(args.output, "mesh_wireframe.png")
                        visualizer.visualize_mesh(mesh, screenshot_path=wireframe_path, show_wireframe=True)
            except Exception as e:
                logger.error(f"Error processing mesh: {e}")
                if args.debug:
                    import traceback
                    traceback.print_exc()
        else:
            print("Loading point cloud file...")
            try:
                pcd = visualizer.load_point_cloud(file_path)
                
                if len(pcd.points) == 0:
                    print("Warning: Point cloud has no points. File may be invalid or empty.")
                else:
                    print(f"Point cloud loaded successfully with {len(pcd.points)} points")
                    
                    # Create a screenshot path if output directory specified
                    screenshot_path = os.path.join(args.output, "point_cloud_visualization.png") if args.output else None
                    
                    # Analyze the point cloud
                    stats = visualizer.analyze_point_cloud(pcd)
                    print("\nPoint Cloud Statistics:")
                    print(visualizer.print_point_cloud_analysis(stats))
                    
                    # Save the analysis to a file if output directory specified
                    if args.output:
                        analysis_path = os.path.join(args.output, "point_cloud_analysis.txt")
                        with open(analysis_path, 'w') as f:
                            f.write(visualizer.print_point_cloud_analysis(stats))
                        print(f"Analysis saved to: {analysis_path}")
                    
                    # Visualize the point cloud
                    print("Visualizing point cloud...")
                    visualizer.visualize_point_cloud(pcd, screenshot_path=screenshot_path)
            except Exception as e:
                logger.error(f"Error processing point cloud: {e}")
                if args.debug:
                    import traceback
                    traceback.print_exc()
        
        print("Visualization complete")
        
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        if args.debug:
            import traceback
            traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()