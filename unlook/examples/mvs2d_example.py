#!/usr/bin/env python3
"""
MVS2D Neural Network Example for Unlook SDK

This example demonstrates how to use the MVS2D neural network to enhance
point clouds generated by the Unlook SDK 3D scanner.

Usage:
    python mvs2d_example.py --calibration path/to/calibration.json [options]
"""

import os
import sys
import argparse
import logging
import time
import numpy as np
from pathlib import Path

# Add parent directory to path for imports
parent_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, parent_dir)

# Import Unlook SDK modules
from unlook.client import create_client
from unlook.client.static_scanner import StaticScanConfig, create_static_scanner

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("mvs2d_example")

def parse_args():
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(description='MVS2D Neural Network Example for Unlook SDK')
    
    # Connection arguments
    parser.add_argument('--host', type=str, default='localhost',
                      help='Unlook server host')
    parser.add_argument('--port', type=int, default=5566,
                      help='Unlook server port')
    
    # Scanning configuration
    parser.add_argument('--calibration', type=str, default=None,
                      help='Path to calibration file')
    parser.add_argument('--quality', type=str, default='high',
                      choices=['medium', 'high', 'ultra'],
                      help='Scanning quality preset')
    parser.add_argument('--output', type=str, default='point_cloud.ply',
                      help='Output point cloud file')
    
    # Neural network options
    parser.add_argument('--use-gpu', action='store_true',
                      help='Use GPU acceleration if available')
    parser.add_argument('--nn-model', type=str, default=None,
                      help='Path to neural network model weights')
    parser.add_argument('--nn-backend', type=str, default=None,
                      choices=['pytorch', 'tensorflow'],
                      help='Neural network backend to use')
    
    # Processing options
    parser.add_argument('--nn-denoise', action='store_true',
                      help='Apply neural network denoising')
    parser.add_argument('--nn-fill-holes', action='store_true',
                      help='Apply neural network hole filling')
    parser.add_argument('--nn-enhance', action='store_true',
                      help='Apply neural network detail enhancement')
    parser.add_argument('--debug', action='store_true',
                      help='Enable debug output')
    
    # Compare with/without neural network
    parser.add_argument('--compare', action='store_true',
                      help='Generate comparison point clouds with and without neural network')
    
    return parser.parse_args()

def main():
    """Main function."""
    args = parse_args()
    
    # Create Unlook client
    try:
        logger.info(f"Connecting to Unlook server at {args.host}:{args.port}")
        client = create_client(args.host, args.port)
        client.connect()
        logger.info("Connected to Unlook server")
    except Exception as e:
        logger.error(f"Failed to connect to Unlook server: {e}")
        return
    
    # Check if GPU acceleration is available
    try:
        from unlook.client.gpu_utils import is_gpu_available, diagnose_gpu
        gpu_available = is_gpu_available()
        if gpu_available:
            logger.info("GPU acceleration is available")
            gpu_info = diagnose_gpu()
            logger.info(f"GPU information: {gpu_info}")
        else:
            logger.warning("GPU acceleration is not available")
    except ImportError:
        logger.warning("GPU utilities not available")
        gpu_available = False
    
    # Check if neural network processing is available
    try:
        from unlook.client.nn_mvs2d import is_mvs2d_available
        nn_available = is_mvs2d_available()
        if nn_available:
            logger.info("MVS2D neural network processing is available")
        else:
            logger.warning("MVS2D neural network processing is not available")
            if args.compare:
                logger.warning("Cannot perform comparison without neural network processing")
                args.compare = False
    except ImportError:
        logger.warning("Neural network module not available")
        nn_available = False
        args.compare = False
    
    # Create scanner configuration
    config = StaticScanConfig()
    config.set_quality_preset(args.quality)
    config.debug = args.debug
    config.use_gpu = args.use_gpu and gpu_available
    
    # Standard scan without neural network enhancement
    if args.compare:
        logger.info("Performing standard scan without neural network")
        config.use_neural_network = False
        scanner = create_static_scanner(
            client=client,
            config=config,
            calibration_file=args.calibration
        )
        
        # Perform scan
        start_time = time.time()
        standard_point_cloud = scanner.perform_scan()
        standard_time = time.time() - start_time
        logger.info(f"Standard scan completed in {standard_time:.2f} seconds")
        
        # Save standard point cloud
        standard_output = args.output.replace('.ply', '_standard.ply')
        scanner.save_point_cloud(standard_output)
        logger.info(f"Standard point cloud saved to {standard_output}")
        
        # Get processing statistics
        standard_stats = scanner.get_processing_stats()
        logger.info(f"Standard scan statistics: {standard_stats}")
    
    # Scan with neural network enhancement
    logger.info("Performing scan with neural network enhancement")
    config.use_neural_network = nn_available
    
    # Configure neural network options
    if nn_available:
        config.nn_model_path = args.nn_model
        config.ml_backend = args.nn_backend
        config.nn_denoise = args.nn_denoise
        config.nn_fill_holes = args.nn_fill_holes
        config.nn_enhance_details = args.nn_enhance
    
    # Create scanner with neural network enhancement
    scanner = create_static_scanner(
        client=client,
        config=config,
        calibration_file=args.calibration
    )
    
    # Perform scan
    start_time = time.time()
    enhanced_point_cloud = scanner.perform_scan()
    enhanced_time = time.time() - start_time
    logger.info(f"Enhanced scan completed in {enhanced_time:.2f} seconds")
    
    # Save enhanced point cloud
    enhanced_output = args.output if not args.compare else args.output.replace('.ply', '_enhanced.ply')
    scanner.save_point_cloud(enhanced_output)
    logger.info(f"Enhanced point cloud saved to {enhanced_output}")
    
    # Get processing statistics
    enhanced_stats = scanner.get_processing_stats()
    logger.info(f"Enhanced scan statistics: {enhanced_stats}")
    
    # Compare results if both scans were performed
    if args.compare:
        try:
            import open3d as o3d
            
            # Load point clouds
            standard_pcd = o3d.io.read_point_cloud(standard_output)
            enhanced_pcd = o3d.io.read_point_cloud(enhanced_output)
            
            # Compare point counts
            standard_points = len(standard_pcd.points)
            enhanced_points = len(enhanced_pcd.points)
            point_diff = enhanced_points - standard_points
            point_ratio = enhanced_points / standard_points if standard_points > 0 else float('inf')
            
            logger.info(f"Point cloud comparison:")
            logger.info(f"  Standard: {standard_points} points in {standard_time:.2f} seconds")
            logger.info(f"  Enhanced: {enhanced_points} points in {enhanced_time:.2f} seconds")
            logger.info(f"  Difference: {point_diff} points ({point_ratio:.2f}x)")
            
        except ImportError:
            logger.warning("Open3D not available for point cloud comparison")
    
    # Disconnect from server
    client.disconnect()
    logger.info("Disconnected from Unlook server")
    logger.info("Example completed successfully")

if __name__ == "__main__":
    main()